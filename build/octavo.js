// Generated by CoffeeScript 1.6.1
(function() {
  var block_command_menu, block_to_h1, block_to_h2, block_to_h3, block_to_h4, block_to_h5, block_to_h6, block_to_list, block_to_paragraph, block_to_preformatted, body, clean_interface_elements, clean_up, cleanups, create_anchor, create_command_menu, create_new_link, create_phrase, create_status, element_command_menu, escape_interface, exit_phrase, forbidden, forpidden, get_position, get_tree, highlight_element, highlight_element_style, image_formats, indent_block, insert_image, key, keycodes, markdown_shortcuts, markdown_to_html, message, move_block_down, move_block_up, next_element, node_name, octavo, on_focusin, on_keydown, on_keyup, on_mouseup, on_paste, pad, pad_block, paste_image, preformatted_br_return, previous_element, pseudo_schemes, regular_br_return, remove_enclosing, save, save_image, select_current_element, select_first_element, set_position, set_title, text_nodes, to_jquery, to_node, toggle_br_mode, toggle_cheat_sheet, toggle_code, toggle_em, toggle_markdown_shortcuts, toggle_pad_visibility, toggle_phrase, toggle_strong, toggle_supersub, transformable, transformable_blocks, unhighlight_element, unhighlight_element_style, unindent_block, update_status, weird_to_paragraph, weirds, _ref,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  octavo = (_ref = this.octavo) != null ? _ref : this.octavo = {
    categories: {},
    commands: {},
    editing: false,
    options: {
      markdownShortcuts: false,
      visibleBoundaries: false
    },
    shortcuts: {}
  };

  body = null;

  $(function() {
    body = $("body");
    body.keydown(on_keydown);
    body.keyup(on_keyup);
    body.mouseup(on_mouseup);
    body.focusin(on_focusin);
    return body.bind("paste", on_paste);
  });

  keycodes = {
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  key = function(e) {
    if (!e.ctrlKey) {
      if (e.which === 27) {
        return "Esc";
      }
      return;
    }
    if ((e.which > 47) && (e.which < 58)) {
      return "Ctrl+" + (e.which - 48);
    } else if ((e.which > 64) && (e.which < 91)) {
      return "Ctrl+" + String.fromCharCode(e.which);
    } else if (e.keyCode in keycodes) {
      return "Ctrl+" + keycodes[e.keyCode];
    } else {
      return "Ctrl " + e.keyCode;
    }
  };

  on_keydown = function(e) {
    var position, pressed, _ref1;
    pressed = key(e);
    if ("Ctrl+E" === pressed) {
      octavo.toggle();
      e.preventDefault();
      return false;
    }
    if (octavo.editing) {
      position = get_position();
      if (position.selected && (pressed in octavo.shortcuts)) {
        octavo.shortcuts[pressed](position);
        e.preventDefault();
        return false;
      } else if (e.which === 13) {
        if (position.block) {
          if ((node_name(position.block)) === "pre") {
            return preformatted_br_return(position, e);
          } else if (position.block.octavoBrMode) {
            return regular_br_return(position, e);
          }
        }
      }
      if ((_ref1 = e.which) !== 16 && _ref1 !== 17 && _ref1 !== 18 && _ref1 !== 91) {
        return update_status(position);
      }
    }
  };

  markdown_to_html = function(position, pattern, tag, guard) {
    var code, contents, node, range, string, text, _ref1, _ref2, _ref3;
    node = (_ref1 = position.range) != null ? _ref1.startContainer : void 0;
    if (node && (node.nodeType === 3) && node.textContent) {
      string = node.textContent.slice(0, position.range.startOffset);
      if (guard != null ? guard.exec(string) : void 0) {
        return;
      }
      text = pattern.exec(string);
      if (text) {
        range = rangy.createRange();
        range.setStart(node, position.range.startOffset - text[0].length);
        range.setEnd(node, position.range.startOffset);
        contents = range.extractContents();
        code = $("<" + tag + "/>").text(text[1]);
        range.insertNode(document.createTextNode(""));
        range.insertNode(code[0]);
        if (position.block) {
          pad_block(position.block);
        }
        if ((_ref2 = code[0].nextSibling) != null ? _ref2.nextSibling : void 0) {
          octavo.selectStart((_ref3 = code[0].nextSibling) != null ? _ref3.nextSibling : void 0);
        } else {
          octavo.selectEnd(code[0]);
        }
        return true;
      } else {
        return false;
      }
    }
  };

  markdown_shortcuts = function(position, e) {
    var strong;
    if ((e.which === 56) && e.shiftKey) {
      strong = markdown_to_html(position, /\*\*([^*]+)\*\*$/, "strong");
      if (!strong) {
        return markdown_to_html(position, /\*([^*]+)\*$/, "em", /\*\*([^*]+)\*$/);
      }
    } else if ((e.which === 220) && e.shiftKey) {
      return markdown_to_html(position, /\|([^|]+)\|$/, "code");
    }
  };

  on_keyup = function(e) {
    var changed, position, pressed, _ref1;
    pressed = key(e);
    if (octavo.editing) {
      if (e.which === 17) {
        return;
      }
      position = get_position();
      if (e.which === 13) {
        changed = weird_to_paragraph(position);
        if (changed) {
          position = get_position();
        }
      } else if (octavo.options.markdownShortcuts) {
        markdown_shortcuts(position, e);
      }
      if ((_ref1 = e.which) !== 16 && _ref1 !== 17 && _ref1 !== 18 && _ref1 !== 91) {
        update_status(position);
      }
      if (position.selected && (pressed in cleanups)) {
        cleanups[pressed](position);
        e.preventDefault();
        return false;
      }
    }
  };

  on_mouseup = function(e) {
    var position;
    position = get_position();
    if (octavo.editing) {
      return update_status(position);
    } else if (e.shiftKey) {
      if (!position.point) {
        return;
      }
      return octavo.toggle();
    } else if (e.altKey) {
      octavo.on();
      e.preventDefault();
      return false;
    }
  };

  on_focusin = function(e) {
    var position;
    if (octavo.editing) {
      position = get_position();
      return update_status(position);
    }
  };

  on_paste = function(e) {
    var image, position;
    if (octavo.editing) {
      position = get_position();
      if (position.balanced) {
        image = paste_image(position, e);
        if (image) {
          e.preventDefault();
          return false;
        }
      }
    }
  };

  cleanups = {};

  octavo.blocks = {
    div: true,
    dd: true,
    dt: true,
    figcaption: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    li: true,
    p: true,
    pre: true,
    td: true,
    th: true
  };

  octavo.phrases = {
    a: true,
    abbr: true,
    b: true,
    bdi: true,
    bdo: true,
    cite: true,
    code: true,
    data: true,
    dfn: true,
    em: true,
    i: true,
    kbd: true,
    mark: true,
    q: true,
    rp: true,
    rt: true,
    ruby: true,
    s: true,
    samp: true,
    small: true,
    span: true,
    strong: true,
    sub: true,
    sup: true,
    time: true,
    u: true,
    "var": true
  };

  node_name = function(node) {
    return node.nodeName.toLowerCase();
  };

  get_tree = function(node) {
    var block, element, phrase, tag, tags, tree;
    tree = [];
    tags = [];
    element = phrase = block = null;
    while (node.parentElement) {
      if (node.nodeType === 1) {
        tag = node_name(node);
        tree.push(node);
        tags.push(tag);
        if (!element) {
          element = node;
        }
        if ((!phrase) && (tag in octavo.phrases)) {
          phrase = node;
        }
        if ((!block) && (tag in octavo.blocks)) {
          block = node;
        }
      }
      node = node.parentElement;
    }
    return [element, phrase, block, tree, tags];
  };

  get_position = function() {
    var block, element, phrase, position, range, selection, tags, tree, _ref1;
    position = {};
    selection = rangy.getSelection();
    position.selection = selection;
    if (!selection.rangeCount) {
      return position;
    }
    position.selected = true;
    range = selection.getRangeAt(0);
    position.range = range;
    if (range) {
      position.balanced = range.startContainer === range.endContainer;
      position.point = position.balanced && (range.startOffset === range.endOffset);
      _ref1 = get_tree(range.startContainer), element = _ref1[0], phrase = _ref1[1], block = _ref1[2], tree = _ref1[3], tags = _ref1[4];
      position.element = element;
      position.phrase = phrase;
      position.block = block;
      position.tree = tree;
      position.tags = tags;
    }
    return position;
  };

  octavo.on = function() {
    var position, reset, set_title;
    octavo.editing = true;
    body.attr("contenteditable", "true");
    position = get_position();
    reset = $("meta[data-octavo-reset]");
    if (reset.size()) {
      reset.remove();
      body.empty();
      document.title = "Title";
      body.append("<h1>Heading</h1>");
      set_title = function(value) {
        document.title = value;
        select_first_element("h1");
        return select_current_element(get_position());
      };
      octavo.input(set_title, "Title");
      $("form.OctavoForm input").select();
    } else if ((!position.selected) || ("body" === node_name(position.element))) {
      select_first_element("p");
      position = get_position();
    }
    create_status();
    update_status(position);
    window.onbeforeunload = function() {
      return "You have been editing this page.";
    };
    return this;
  };

  octavo.off = function() {
    octavo.editing = false;
    body.removeAttr("contenteditable");
    clean_interface_elements();
    window.onbeforeunload = null;
    octavo._saved = null;
    return this;
  };

  octavo.toggle = function() {
    console.log(":toggle_editing");
    if (!octavo.editing) {
      octavo.on();
    } else {
      octavo.off();
    }
    return this;
  };

  to_node = function(elem) {
    if (elem instanceof jQuery) {
      return elem[0];
    } else {
      return elem;
    }
  };

  to_jquery = function(elem) {
    if (elem instanceof jQuery) {
      return elem;
    } else {
      return $(elem);
    }
  };

  set_position = function(elem, place) {
    var node, range, selection;
    console.log(":set_position");
    node = to_node(elem);
    if (!node) {
      return;
    }
    range = rangy.createRange();
    range.selectNodeContents(node);
    if (place === "start") {
      range.collapse(true);
    }
    if (place === "end") {
      range.collapse(false);
    }
    selection = rangy.getSelection();
    selection.setSingleRange(range);
    return update_status(get_position());
  };

  select_first_element = function(tag) {
    var element, elements;
    elements = $("" + tag + ":first");
    if (!elements.size()) {
      element = $("<" + tag + "/>").appendTo(body);
      elements = elements.add(element);
    }
    set_position(elements[0], "start");
    return update_status(get_position());
  };

  octavo.selectStart = function(elem) {
    set_position(elem, "start");
    return this;
  };

  octavo.selectEnd = function(elem) {
    set_position(elem, "end");
    return this;
  };

  octavo.selectAll = function(elem) {
    set_position(elem, "all");
    return this;
  };

  octavo.saveCaret = function() {
    octavo._saved = rangy.saveSelection();
    return this;
  };

  octavo.restoreCaret = function() {
    if (octavo._saved) {
      if (!octavo._saved.restored) {
        rangy.restoreSelection(octavo._saved);
      }
    }
    return this;
  };

  create_status = function() {
    var status;
    status = $("<div>\u2014</div>");
    status.attr({
      "class": "OctavoStatus",
      "contenteditable": "false"
    });
    status.css({
      "position": "fixed",
      "top": "0",
      "left": "0",
      "width": "20%",
      "box-shadow": "0 0 32px rgba(192, 192, 192, 0.5)",
      "text-align": "right",
      "font-size": "22px",
      "height": "24px",
      "border-right": "1px solid #ccc",
      "border-bottom": "1px solid #ccc",
      "padding": "6px 24px",
      "vertical-align": "middle",
      "border-bottom-right-radius": "6px",
      "background": "#fff"
    });
    return body.append(status.slideDown(100));
  };

  pad = function() {
    var span;
    span = $("<span>\u200B</span>").attr({
      "class": "OctavoPad",
      "contenteditable": "false"
    });
    if (octavo.options.visibleBoundaries) {
      span.css({
        "style": "font-weight: 300; color: #ccc"
      });
      span.text("|");
    }
    return span;
  };

  forbidden = {
    "OctavoStatus": true,
    "OctavoForm": true,
    "OctavoMessage": true,
    "OctavoCheatSheet": true,
    "OctavoCommandMenu": true
  };

  forpidden = {
    "OctavoPad": true,
    "rangySelectionBoundary": true
  };

  pad_block = function(node) {
    var phrase, selector;
    if ($(node).attr("class") in forbidden) {
      return;
    }
    $("span.OctavoPad").remove();
    selector = ((function() {
      var _results;
      _results = [];
      for (phrase in octavo.phrases) {
        _results.push(phrase);
      }
      return _results;
    })()).join(", ");
    return $(selector, node).each(function(index, node) {
      phrase = $(node);
      if ((phrase.attr("class")) in forpidden) {
        return;
      }
      phrase.prepend(pad());
      if ((node_name(node)) !== "a") {
        return phrase.after(pad());
      } else {
        return phrase.append(pad());
      }
    });
  };

  update_status = function(position) {
    var a, arrow, build, i, length, menu, node, offset, q, start, status, tag, _i, _ref1, _ref2;
    if (!position) {
      return;
    }
    if (!position.tags) {
      return;
    }
    status = $("div.OctavoStatus");
    status.empty();
    menu = $("div.OctavoCommandMenu");
    if (menu.size()) {
      tag = menu.attr("data-octavo-element");
      q = $("<span>?</span>").css({
        "padding": "0 3px",
        "color": "#aaa",
        "font-size": "18px"
      });
      status.append(q, " " + tag);
      return;
    }
    if (octavo.options.visibleBoundaries) {
      $("<span>b</span>").appendTo(status).css({
        "float": "left",
        "color": "#999",
        "font-size": "90%"
      });
    }
    if (octavo.options.markdownShortcuts) {
      $("<span>m</span>").appendTo(status).css({
        "float": "left",
        "color": "#999",
        "font-size": "90%"
      });
    }
    if (position.range) {
      if (position.range.startContainer) {
        start = position.range.startContainer;
        if ((node_name(start)) === "a") {
          length = position.range.startContainer.childNodes.length;
          offset = position.range.startOffset;
          if (length === offset) {
            position.tags.shift();
            position.tree.shift();
          }
        }
      }
    }
    for (i = _i = 1; _i < 8; i = ++_i) {
      tag = position.tags.shift();
      node = position.tree.shift();
      if (!tag) {
        break;
      }
      if (!node) {
        break;
      }
      if (tag === "body") {
        if (i === 1) {
          status.prepend("body");
        }
        break;
      }
      a = $("<a/>");
      a.attr("href", "#");
      a.css({
        "color": "#555",
        "text-decoration": "none",
        "border": "none"
      });
      if (i === 1) {
        a.css({
          "font-weight": "400"
        });
      }
      build = function(a, node) {
        return a.mousedown(function(e) {
          create_command_menu(null, node);
          e.preventDefault();
          return false;
        });
      };
      build(a, node);
      a.text(tag);
      status.prepend(a);
      if (i < 8) {
        arrow = $("<span>\u279E</span>").css({
          "padding": "0 3px",
          "color": "#aaa",
          "font-size": "18px"
        });
        status.prepend(" ", arrow, " ");
      }
    }
    if (!((_ref1 = status[0]) != null ? (_ref2 = _ref1.childNodes) != null ? _ref2.length : void 0 : void 0)) {
      status.append("Octavo");
    }
    if (position.block) {
      return pad_block(position.block);
    }
  };

  clean_interface_elements = function() {
    $("div.OctavoStatus").remove();
    $("form.OctavoForm").remove();
    $("div.OctavoMessage").remove();
    $("div.OctavoCheatSheet").remove();
    $("div.OctavoCommandMenu").remove();
    $("span.OctavoPad").remove();
    return $("span.rangySelectionBoundary").remove();
    /*
    each (index, node) ->
      # TODO: octavo.take @
      boundary = $ node
      span = $("<span/>").appendTo boundary
      span.unwrap()
      span.remove()
    */

  };

  octavo.input = function(callback, initial) {
    var form, input;
    if (initial == null) {
      initial = "";
    }
    console.log(":octavo.input");
    form = $("<form/>");
    form.attr({
      "class": "OctavoForm",
      "contenteditable": "false"
    });
    form.css({
      "position": "fixed",
      "margin": "0",
      "padding": "0",
      "top": "48px",
      "left": "12px"
    });
    input = $("<input/>");
    input.css({
      "border": "1px solid #ccc",
      "font-size": "1em",
      "width": "310px",
      "padding": "3px",
      "font-size": "16px",
      "font-family": "'Helvetica Neue', Helvetica, Arial",
      "border-radius": "3px"
    });
    if (initial) {
      input.val(initial);
    }
    form.submit(function(e) {
      callback(input.val());
      form.remove();
      e.preventDefault();
      return false;
    });
    form.append(input);
    body.append(form);
    return input.focus();
  };

  create_command_menu = function(position, node) {
    var div, do_command, input, keyup, menus, pristine, results, selected, selection, tag;
    console.log(":create_command_menu");
    menus = $("div.OctavoCommandMenu");
    if (menus.size()) {
      menus.remove();
      if (octavo._saved) {
        rangy.restoreSelection(octavo._saved);
      }
      return;
    }
    octavo.saveCaret();
    pristine = get_position();
    div = $("<div/>");
    div.attr({
      "class": "OctavoCommandMenu",
      "contenteditable": "false"
    });
    div.css({
      "position": "fixed",
      "top": "48px",
      "left": "12px",
      "font-size": "14px",
      "font-weight": "300",
      "width": "318px",
      "box-shadow": "0 0 32px rgba(192, 192, 192, 0.75)",
      "padding": "0",
      "margin": "0",
      "background": "transparent",
      "font-family": "'Helvetica Neue', Helvetica, Arial, sans-serif"
    });
    if (position) {
      if (!position.point) {
        tag = null;
        selection = true;
      } else {
        tag = node_name(node);
        selection = false;
      }
    } else {
      tag = node_name(node);
      selection = false;
    }
    div.attr("data-octavo-element", tag || "Text");
    input = $("<input/>").appendTo(div);
    input.css({
      "width": "310px",
      "padding": "3px",
      "font-size": "16px",
      "font-family": "'Helvetica Neue', Helvetica, Arial",
      "border-radius": "3px"
    });
    results = $("<div/>").css("width", "312px").appendTo(div);
    results.css({
      "margin-bottom": "0",
      "border-bottom": "1px solid #ccc"
    });
    selected = 1;
    octavo._current = null;
    do_command = function() {
      var command, status, _ref1;
      if (octavo._current) {
        command = octavo.commands[octavo._current[0]][octavo._current[1]];
        if ((_ref1 = octavo._current[0]) === "Insert" || _ref1 === "Selection") {
          status = command(pristine);
        } else if (octavo._current[0] === "Global") {
          status = command();
        } else {
          status = command(node);
        }
        if (status !== "selected") {
          octavo.restoreCaret();
        }
        div.remove();
        return update_status(get_position());
      }
    };
    input.keydown(function(e) {
      var result_items;
      if (e.which === 38) {
        if (selected > 1) {
          selected--;
        }
        $("div", results).each(function(index, result) {
          var category, name;
          result = $(result);
          index = index + 1;
          if (index === selected) {
            result.css({
              "background": "#f0f6ff"
            });
            category = result.attr("data-octavo-category");
            name = result.attr("data-octavo-name");
            return octavo._current = [category, name];
          } else {
            return result.css({
              "background": "#fff"
            });
          }
        });
        e.preventDefault();
        return false;
      } else if (e.which === 40) {
        result_items = $("div", results);
        if (result_items.size() === selected) {
          e.preventDefault();
          return false;
        }
        if (selected < 8) {
          selected++;
        }
        $("div", results).each(function(index, result) {
          var category, name;
          result = $(result);
          index = index + 1;
          if (index === selected) {
            result.css({
              "background": "#f0f6ff"
            });
            category = result.attr("data-octavo-category");
            name = result.attr("data-octavo-name");
            return octavo._current = [category, name];
          } else {
            return result.css({
              "background": "#fff"
            });
          }
        });
        e.preventDefault();
        return false;
      } else if (e.which === 13) {
        if (octavo._current) {
          console.log("octavo._current", octavo._current);
          do_command();
          e.preventDefault();
          return false;
        }
      }
    });
    keyup = function() {
      var category, description, guard, name, new_item, result, result_items, search, size, todo;
      search = input.val();
      results.empty();
      todo = 8;
      for (category in octavo.categories) {
        if (selection) {
          if (category !== "Selection") {
            continue;
          }
        } else {
          if (category === "Selection") {
            continue;
          }
        }
        for (name in octavo.categories[category]) {
          if (name.indexOf(search) > -1) {
            description = octavo.categories[category][name];
            result = $("<div/>");
            result.attr("data-octavo-category", category);
            result.attr("data-octavo-name", name);
            result.css({
              "line-height": "12px",
              "border-top": "1px solid #ccc",
              "border-left": "1px solid #ccc",
              "border-right": "1px solid #ccc",
              "background": "#fff",
              "padding": "3px",
              "width": "100%",
              "cursor": "pointer"
            });
            result.hover(function() {
              var background;
              result = $(this);
              background = result.css("background");
              result.attr("data-octavo-background", background);
              return result.css({
                "background": "#f0f6ff"
              });
            }, function() {
              var background;
              result = $(this);
              background = result.attr("data-octavo-background");
              return result.css({
                "background": background
              });
            });
            if ((9 - todo) === selected) {
              result.css({
                "background": "#f0f6ff"
              });
              octavo._current = [category, name];
            }
            guard = function(category, name) {
              return result.click(function() {
                octavo._current = [category, name];
                return do_command();
              });
            };
            guard(category, name);
            result.append($("<strong>" + category + ": " + name + "</strong>"));
            result.append($("<br/>"));
            result.append($("<span>" + description + "</span>").css({
              "font-size": "10px",
              "color": "#999"
            }));
            results.append(result);
            todo--;
            if (!todo) {
              return;
            }
          }
        }
      }
      result_items = $("div", results);
      size = result_items.size();
      if ((0 < size && size < selected)) {
        selected = size;
        new_item = result_items.parent().find("div:last");
        return new_item.css({
          "background": "#f0f6ff"
        });
      } else if (!size) {
        return octavo._current = null;
      }
    };
    input.keyup(function(e) {
      if (e.which === 13) {
        return;
      }
      if (e.which === 38) {
        return;
      }
      if (e.which === 40) {
        return;
      }
      return keyup();
    });
    body.append(div);
    input.focus();
    return keyup();
  };

  message = function(text, status) {
    var div, timeout;
    console.log(":message");
    $("div.OctavoMessage").remove();
    div = $("<div>\u2014</div>");
    div.attr({
      "class": "OctavoMessage",
      "contenteditable": "false"
    });
    div.css({
      "position": "fixed",
      "bottom": "24px",
      "left": "24px",
      "padding": "3px 12px",
      "font-size": "18px",
      "font-weight": "300",
      "background-color": "rgb(242, 242, 242)",
      "border": "2px solid #ccc",
      "border-radius": "6px",
      "box-shadow": "3px 3px 24px rgba(242, 242, 242, 0.8)",
      "min-width": "180px",
      "text-align": "center"
    });
    if (status === "success") {
      div.css({
        "color": "#468847",
        "background-color": "#dff0d8",
        "border-color": "#d6e9c6"
      });
    } else if (status === "failure") {
      div.css({
        "color": "#b94a48",
        "background-color": "#f2dede",
        "border-color": "#eed3d7"
      });
    }
    div.text(text);
    body.append(div);
    timeout = 3000;
    if (status === "failure") {
      timeout = 7000;
    }
    return setTimeout(function() {
      return div.fadeOut(1000, "swing", function() {
        return div.remove();
      });
    }, timeout);
  };

  octavo.change = function(element, tag) {
    var span, wrapper;
    element = to_jquery(element);
    span = $("<span/>");
    element.append(span);
    element.wrap("<" + tag + "/>");
    span.unwrap();
    wrapper = span.parent();
    span.remove();
    return wrapper;
  };

  octavo.silently = function() {
    var args, func, result, saved;
    func = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    saved = rangy.saveSelection();
    result = func.apply(null, args);
    rangy.restoreSelection(saved);
    return result;
  };

  toggle_pad_visibility = function(position) {
    console.log(":toggle_pad_visibility");
    octavo.options.visibleBoundaries = !octavo.options.visibleBoundaries;
    if (octavo.options.visibleBoundaries) {
      return octavo.options.markdownShortcuts = false;
    }
  };

  octavo.shortcuts["Ctrl+B"] = toggle_pad_visibility;

  toggle_markdown_shortcuts = function(position) {
    console.log(":toggle_markdown_shortcuts");
    octavo.options.markdownShortcuts = !octavo.options.markdownShortcuts;
    if (octavo.options.markdownShortcuts) {
      return octavo.options.visibleBoundaries = false;
    }
  };

  octavo.shortcuts["Ctrl+M"] = toggle_markdown_shortcuts;

  select_current_element = function(position) {
    console.log(":select_current_element");
    if (position.element) {
      return octavo.selectAll(position.element);
    }
  };

  octavo.shortcuts["Ctrl+\\"] = select_current_element;

  transformable_blocks = {
    div: true,
    figcaption: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    p: true,
    pre: true
  };

  transformable = function(position, change) {
    var tag;
    if (position.balanced && position.block) {
      tag = node_name(position.block);
      if (tag in transformable_blocks) {
        if (tag !== change) {
          return true;
        }
      }
    }
    return false;
  };

  block_to_h1 = function(position) {
    console.log(":transform_to_h1");
    if (transformable(position, "h1")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "h1");
      });
    }
  };

  octavo.shortcuts["Ctrl+1"] = block_to_h1;

  block_to_h2 = function(position) {
    console.log(":transform_to_h2");
    if (transformable(position, "h2")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "h2");
      });
    }
  };

  octavo.shortcuts["Ctrl+2"] = block_to_h2;

  block_to_h3 = function(position) {
    console.log(":transform_to_h3");
    if (transformable(position, "h3")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "h3");
      });
    }
  };

  octavo.shortcuts["Ctrl+3"] = block_to_h3;

  block_to_h4 = function(position) {
    console.log(":transform_to_h4");
    if (transformable(position, "h4")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "h4");
      });
    }
  };

  octavo.shortcuts["Ctrl+4"] = block_to_h4;

  block_to_h5 = function(position) {
    console.log(":transform_to_h5");
    if (transformable(position, "h5")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "h5");
      });
    }
  };

  octavo.shortcuts["Ctrl+5"] = block_to_h5;

  block_to_h6 = function(position) {
    console.log(":transform_to_h6");
    if (transformable(position, "h6")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "h6");
      });
    }
  };

  octavo.shortcuts["Ctrl+6"] = block_to_h6;

  block_to_list = function(position) {
    console.log(":transform_to_list");
    if (transformable(position, "li")) {
      return octavo.silently(function() {
        var block;
        block = octavo.change(position.block, "li");
        return block.wrap("<ul/>");
      });
    }
  };

  octavo.shortcuts["Ctrl+U"] = block_to_list;

  block_to_paragraph = function(position) {
    console.log(":transform_to_paragraph");
    if (transformable(position, "p")) {
      return octavo.silently(function() {
        return octavo.change(position.block, "p");
      });
    }
  };

  octavo.shortcuts["Ctrl+P"] = block_to_paragraph;

  block_to_preformatted = function(position) {
    var p, tag;
    console.log(":transform_to_preformatted");
    if (position.balanced && position.block) {
      tag = node_name(position.block);
      if (tag !== "pre") {
        if (tag in transformable_blocks) {
          return octavo.silently(function() {
            return octavo.change(position.block, "pre");
          });
        }
      } else {
        p = $("<p/>").insertAfter(position.block);
        p.append($("<br>"));
        return octavo.selectStart(p[0]);
      }
    }
  };

  octavo.shortcuts["Ctrl+O"] = block_to_preformatted;

  toggle_cheat_sheet = function(position) {
    var div, sheets, ul;
    console.log(":toggle_cheat_sheet");
    sheets = $("div.OctavoCheatSheet");
    if (sheets.size()) {
      sheets.remove();
      return;
    }
    div = $("<div/>");
    ul = $("<ul/>").appendTo(div);
    ul.append("<li>Ctrl+H — Show cheat sheet</li>");
    ul.append("<li>Ctrl+\\ — Select all of the current element content</li>");
    ul.append("<li>Ctrl+U — Block to list</li>");
    ul.append("<li>Ctrl+P — Block to paragraph</li>");
    ul.append("<li>Ctrl+O — Block to preformatted</li>");
    ul.append("<li>Ctrl+A — Create anchor</li>");
    ul.append("<li>Ctrl+Y — Toggle code</li>");
    ul.append("<li>Ctrl+I — Toggle emphasis</li>");
    ul.append("<li>Ctrl+T — Toggle strong emphasis</li>");
    ul.append("<li>Ctrl+K — Insert image</li>");
    ul.append("<li>Ctrl+. — Highlight current element</li>");
    ul.append("<li>Ctrl+- — Move block up</li>");
    ul.append("<li>Ctrl+= — Move block down</li>");
    ul.append("<li>Ctrl+R — Remove enclosing element</li>");
    ul.append("<li>Ctrl+0 — Change page title</li>");
    ul.append("<li>Ctrl+] — Indent block</li>");
    ul.append("<li>Ctrl+[ — Unindent block</li>");
    ul.append("<li>Ctrl+B — Toggle edit warning, and save</li>");
    ul.append("<li>Ctrl+S — Save using HTTP PUT</li>");
    ul.append("<li>Ctrl+1 to 6 — Block to heading</li>");
    ul.append("<li>Ctrl+7 — Toggle superscript and subscript</li>");
    ul.append("<li>Ctrl+8 — Reset phrasal padding</li>");
    ul.append("<li>Ctrl+9 — Toggle BR mode</li>");
    div.attr({
      "class": "OctavoCheatSheet",
      "contenteditable": "false"
    });
    div.css({
      "position": "fixed",
      "top": "24px",
      "left": "24px",
      "padding": "12px 24px",
      "font-size": "15px",
      "font-weight": "300",
      "background-color": "rgb(242, 242, 242)",
      "border": "2px solid #ccc",
      "border-radius": "6px",
      "box-shadow": "24px 24px 64px rgba(96, 96, 96, 0.25)",
      "max-width": "720px"
    });
    return body.append(div);
  };

  octavo.shortcuts["Ctrl+H"] = toggle_cheat_sheet;

  create_anchor = function(position) {
    var anchor, set_anchor_href;
    console.log(":create_anchor");
    if (position.balanced) {
      if (position.phrase && ((node_name(position.phrase)) === "a")) {
        anchor = $(position.phrase);
        set_anchor_href = function(value) {
          anchor.attr("href", value);
          return octavo.selectEnd(anchor[0]);
        };
        return octavo.input(set_anchor_href, anchor.attr("href"));
      } else if (!position.point) {
        anchor = create_phrase(position, "a");
        return octavo.input(function(value) {
          anchor.attr("href", value);
          return octavo.selectEnd(anchor[0]);
        });
      }
    }
  };

  octavo.shortcuts["Ctrl+A"] = create_anchor;

  toggle_code = function(position) {
    console.log(":toggle_code");
    return toggle_phrase(position, "code");
  };

  octavo.shortcuts["Ctrl+Y"] = toggle_code;

  toggle_em = function(position) {
    console.log(":toggle_em");
    return toggle_phrase(position, "em");
  };

  octavo.shortcuts["Ctrl+I"] = toggle_em;

  toggle_strong = function(position) {
    console.log(":toggle_strong");
    return toggle_phrase(position, "strong");
  };

  octavo.shortcuts["Ctrl+T"] = toggle_strong;

  insert_image = function(position) {
    var contents, img, text;
    console.log(":insert_image");
    if (position.balanced) {
      contents = position.range.extractContents();
      text = $(contents).text();
      img = $("<img/>");
      if (text.length) {
        img.attr("alt", text);
      }
      position.range.insertNode(img[0]);
      return octavo.input(function(value) {
        img.attr("src", value);
        return octavo.selectEnd(img[0]);
      });
    }
  };

  octavo.shortcuts["Ctrl+K"] = insert_image;

  highlight_element_style = function(element) {
    var style;
    if (element.attr("data-highlighted")) {
      return;
    }
    element.attr("data-highlighted", "true");
    style = element.attr("style");
    if (style) {
      element.attr("data-style-backup", style);
    }
    return element.css({
      "background-color": "rgba(128, 192, 0, 0.25)",
      "outline": "1px solid #9c0",
      "outline-offset": "0"
    });
  };

  highlight_element = function(position) {
    var element;
    console.log(":highlight_element");
    element = $(position.element);
    highlight_element_style(element);
    if ((node_name(position.element)) === "a") {
      return $("div.OctavoStatus").text(element.attr("href"));
    }
  };

  octavo.shortcuts["Ctrl+."] = highlight_element;

  unhighlight_element_style = function(element) {
    element.removeAttr("data-highlighted");
    if (element.attr("data-style-backup")) {
      element.attr("style", element.attr("data-style-backup"));
      return element.removeAttr("data-style-backup");
    } else {
      return element.removeAttr("style");
    }
  };

  unhighlight_element = function(position) {
    var element;
    console.log(":unhighlight_element");
    element = $(position.element);
    return unhighlight_element_style(element);
  };

  cleanups["Ctrl+."] = unhighlight_element;

  move_block_up = function(position) {
    var current, previous;
    console.log(":move_block_up");
    if (position.balanced) {
      if (position.block) {
        current = position.block;
      } else if (position.element) {
        current = position.element;
      } else {
        return;
      }
      previous = previous_element(current);
      if (previous) {
        return octavo.silently(function() {
          return $(current).insertBefore(previous);
        });
      }
    }
  };

  octavo.shortcuts["Ctrl+-"] = move_block_up;

  move_block_down = function(position) {
    var current, next;
    console.log(":move_block_down");
    if (position.balanced) {
      if (position.block) {
        current = position.block;
      } else if (position.element) {
        current = position.element;
      } else {
        return;
      }
      next = next_element(current);
      if (next) {
        return octavo.silently(function() {
          return $(current).insertAfter(next);
        });
      }
    }
  };

  octavo.shortcuts["Ctrl+="] = move_block_down;

  remove_enclosing = function(position) {
    console.log(":remove_enclosing");
    if (position.balanced && position.element) {
      return octavo.silently(function() {
        var element, span;
        element = $(position.element);
        span = $("<span/>");
        element.append(span);
        span.unwrap();
        return span.remove();
      });
    }
  };

  octavo.shortcuts["Ctrl+R"] = remove_enclosing;

  create_new_link = function(position) {
    console.log(":create_new_link");
    return octavo.commands["Global"]["create new document"]();
  };

  cleanups["Ctrl+N"] = create_new_link;

  /*
  select_next_element = (position) ->
    console.log ":select_next_element"
    false
  
  octavo.shortcuts["Ctrl+]"] = select_next_element
  
  select_previous_element = (position) ->
    console.log ":select_previous_element"
    false
  
  octavo.shortcuts["Ctrl+["] = select_previous_element
  */


  set_title = function(position) {
    console.log(":set_title");
    octavo.saveCaret();
    return octavo.commands["Global"]["set title"]();
  };

  octavo.shortcuts["Ctrl+0"] = set_title;

  indent_block = function(position) {
    var block, left_padding, px;
    console.log(":indent_block");
    if (position.block) {
      block = $(position.block);
      left_padding = block.css("padding-left");
      if (left_padding) {
        if (left_padding.slice(-2) !== "px") {
          return;
        }
        px = parseFloat(left_padding) + 12;
        return block.css("padding-left", px);
      } else {
        return block.css("padding-left", 12);
      }
    }
  };

  octavo.shortcuts["Ctrl+]"] = indent_block;

  unindent_block = function(position) {
    var block, left_padding, px;
    console.log(":unindent_block");
    if (position.block) {
      block = $(position.block);
      left_padding = block.css("padding-left");
      if (left_padding) {
        if (left_padding.slice(-2) !== "px") {
          return;
        }
        px = parseFloat(left_padding) - 12;
        if (px > 0) {
          return block.css("padding-left", px);
        } else if (px === 0) {
          return block.css("padding-left", "");
        }
      } else {
        return block.css("padding-left", 12);
      }
    }
  };

  octavo.shortcuts["Ctrl+["] = unindent_block;

  save = function(edit) {
    console.log(":save");
    octavo.off();
    clean_up();
    if (document.location.protocol === "http:") {
      console.log("Making AJAX call now");
      $.ajax({
        type: "PUT",
        url: document.location.href,
        data: document.documentElement.innerHTML,
        dataType: "text",
        success: function(msg) {
          console.log("Success!", msg);
          return message("Success! Saved: " + msg.substring(0, 96), "success");
        },
        error: function(err) {
          var msg;
          msg = "ERROR! Not saved. " + err.statusText + ": " + err.responseText;
          console.log("Error!", err.responseText);
          return message(msg, "failure");
        }
      });
      console.log("AJAX call made");
    }
    if (edit !== "off") {
      return octavo.on();
    }
  };

  octavo.shortcuts["Ctrl+S"] = save;

  escape_interface = function(position) {
    var forms, menus;
    menus = $("div.OctavoCommandMenu");
    if (menus.size()) {
      create_command_menu();
      return;
    }
    forms = $("form.OctavoForm");
    if (forms.size()) {
      forms.remove();
      octavo.restoreCaret();
      return;
    }
    return save("off");
  };

  octavo.shortcuts["Esc"] = escape_interface;

  toggle_br_mode = function(position) {
    console.log(":toggle_br_mode");
    if (position.block) {
      position.block.octavoBrMode = !position.block.octavoBrMode;
      if (position.block.octavoBrMode) {
        return message("Turned BR mode on", "success");
      } else {
        return message("Turned BR mode off", "success");
      }
    }
  };

  octavo.shortcuts["Ctrl+9"] = toggle_br_mode;

  element_command_menu = function(position) {
    console.log(":element_command_menu");
    if (!position.element) {
      return;
    }
    return create_command_menu(position, position.element);
  };

  octavo.shortcuts["Ctrl+D"] = element_command_menu;

  block_command_menu = function(position) {
    console.log(":block_command_menu");
    if (!position.block) {
      return;
    }
    return create_command_menu(position, position.element);
  };

  octavo.shortcuts["Ctrl+G"] = block_command_menu;

  toggle_supersub = function(position) {
    var contents, sup, tag;
    console.log(":toggle_supersub");
    if (!position.point) {
      contents = position.range.extractContents();
      sup = $("<sup/>").append(contents);
      position.range.insertNode(sup[0]);
      return octavo.selectEnd(sup[0]);
    } else if (position.element) {
      tag = node_name(position.element);
      if (tag === "sup") {
        return octavo.silently(function() {
          return octavo.change(position.element, "sub");
        });
      } else if (tag === "sub") {
        return octavo.silently(function() {
          return octavo.change(position.element, "sup");
        });
      }
    }
  };

  octavo.shortcuts["Ctrl+7"] = toggle_supersub;

  octavo.command = function(category, name, description, command) {
    var wrapped;
    if (!(category in octavo.categories)) {
      octavo.categories[category] = {};
    }
    octavo.categories[category][name] = description;
    wrapped = function(obj) {
      var status;
      console.log("Command:", name);
      if (category !== "Insert" && category !== "Selection") {
        obj = to_jquery(obj);
      }
      status = command(obj);
      if (status === "selected") {
        return "selected";
      }
      return this;
    };
    if (!(category in octavo.commands)) {
      octavo.commands[category] = {};
    }
    return octavo.commands[category][name] = wrapped;
  };

  octavo.command("Modify", "change", "Change the tag name", function(element) {
    octavo.input(function(value) {
      if (!/^[A-Za-z]+[0-9]*$/.test(value)) {
        return;
      }
      octavo.change(element, value);
      return octavo.restoreCaret();
    });
    return "selected";
  });

  octavo.command("Modify", "wrap", "Wrap with a new element", function(element) {
    octavo.input(function(value) {
      if (!/^[A-Za-z]+[0-9]*$/.test(value)) {
        return;
      }
      element.wrap("<" + value + "/>");
      return octavo.restoreCaret();
    });
    return "selected";
  });

  octavo.command("Modify", "take", "Remove the current element but not its children", function(element) {
    return $("<span/>").appendTo(element).unwrap().remove();
  });

  octavo.command("Modify", "destroy", "Remove the element and its children", function(element) {
    return element.remove();
  });

  octavo.command("Modify", "set id", "Set the id attribute", function(element) {
    var set_id_attribute;
    set_id_attribute = function(value) {
      element.attr("id", value);
      return octavo.restoreCaret();
    };
    octavo.input(set_id_attribute, element.attr("id"));
    return "selected";
  });

  octavo.command("Modify", "add class", "Add a class to the element", function(element) {
    octavo.input(function(value) {
      element.addClass(value);
      return octavo.restoreCaret();
    });
    return "selected";
  });

  octavo.command("Modify", "remove class", "Remove a class to the element", function(element) {
    octavo.input(function(value) {
      element.removeClass(value);
      return octavo.restoreCaret();
    });
    return "selected";
  });

  octavo.command("Modify", "take descendants", "Remove all descendant elements, leaving text content", function(element) {
    return element.find("*").each(function() {
      if ($(this).attr("class") in forpidden) {
        return;
      }
      return $("<span/>").appendTo(this).unwrap().remove();
    });
  });

  octavo.command("Style", "left align", "Align text to the left", function(element) {
    return element.css("text-align", "left");
  });

  octavo.command("Style", "centre align", "Align text to centre", function(element) {
    return element.css("text-align", "center");
  });

  octavo.command("Style", "right align", "Align text to the right", function(element) {
    return element.css("text-align", "right");
  });

  octavo.command("Style", "float left", "Float element to the left", function(element) {
    return element.css("float", "left");
  });

  octavo.command("Style", "no float", "Remove element float", function(element) {
    return element.css("float", "");
  });

  octavo.command("Style", "float right", "Float element to the right", function(element) {
    return element.css("float", "right");
  });

  octavo.command("Style", "small caps", "Use small caps font variant", function(element) {
    return element.css("font-variant", "small-caps");
  });

  octavo.command("Style", "no small caps", "Remove small caps font variant", function(element) {
    return element.css("font-variant", "");
  });

  octavo.command("Style", "box", "Apply box style", function(element) {
    return element.css({
      "border": "1px solid #ccc",
      "background-color": "#f6f6f6"
    });
  });

  octavo.command("Style", "no box", "Remove box style", function(element) {
    return element.css({
      "border": "",
      "background-color": ""
    });
  });

  octavo.command("Style", "no style", "Remove all local style", function(element) {
    return element.removeAttr("style");
  });

  octavo.command("Style", "increase padding", "Increase padding in 12px steps", function(element) {
    var padding, px;
    padding = element.css("padding");
    if (padding) {
      if (padding.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(padding) + 12;
      return element.css("padding", px);
    } else {
      return element.css("padding", 12);
    }
  });

  octavo.command("Style", "decrease padding", "Decrease padding in 12px steps", function(element) {
    var padding, px;
    padding = element.css("padding");
    if (padding) {
      if (padding.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(padding) - 12;
      if (px > 0) {
        return element.css("padding", px);
      } else if (px === 0) {
        return element.css("padding", "");
      }
    } else {
      return element.css("padding", 12);
    }
  });

  octavo.command("Style", "indent", "Increase left margin in 12px steps", function(element) {
    var margin, px;
    margin = element.css("margin-left");
    if (margin) {
      if (margin.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(margin) + 12;
      return element.css("margin-left", px);
    } else {
      return element.css("margin-left", 12);
    }
  });

  octavo.command("Style", "unindent", "Decrease left margin in 12px steps", function(element) {
    var margin, px;
    margin = element.css("margin-left");
    if (margin) {
      if (margin.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(margin) - 12;
      if (px > 0) {
        return element.css("margin-left", px);
      } else if (px === 0) {
        return element.css("margin-left", "");
      }
    } else {
      return element.css("margin-left", 12);
    }
  });

  octavo.command("Style", "increase margin", "Increase margin in 12px steps", function(element) {
    var margin, px;
    margin = element.css("margin");
    if (margin) {
      if (margin.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(margin) + 12;
      return element.css("margin", px);
    } else {
      return element.css("margin", 12);
    }
  });

  octavo.command("Style", "decrease margin", "Decrease margin in 12px steps", function(element) {
    var margin, px;
    margin = element.css("margin");
    if (margin) {
      if (margin.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(margin) - 12;
      if (px > 0) {
        return element.css("margin", px);
      } else if (px === 0) {
        return element.css("margin", "");
      }
    } else {
      return element.css("margin", 12);
    }
  });

  octavo.command("Style", "rounder borders", "Increase border radius in 6px steps", function(element) {
    var px, radius;
    radius = element.css("border-radius");
    if (radius) {
      if (radius.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(radius) + 6;
      return element.css("border-radius", px);
    } else {
      return element.css("border-radius", 6);
    }
  });

  octavo.command("Style", "unrounder borders", "Decrease border radius in 6px steps", function(element) {
    var px, radius;
    radius = element.css("border-radius");
    if (radius) {
      if (radius.slice(-2) !== "px") {
        return;
      }
      px = parseFloat(radius) - 6;
      if (px > 0) {
        return element.css("border-radius", px);
      } else if (px === 0) {
        return element.css("border-radius", "");
      }
    } else {
      return element.css("border-radius", 6);
    }
  });

  octavo.command("Move", "before parent", "Move the current element to before its parent", function(element) {
    var parent;
    parent = element.parent();
    return parent.before(element);
  });

  octavo.command("Move", "after parent", "Move the current element to after its parent", function(element) {
    var parent;
    parent = element.parent();
    return parent.after(element);
  });

  octavo.command("Move", "into previous", "Move the current element into the previous element", function(element) {
    var previous;
    previous = previous_element(element[0]);
    if (previous) {
      return $(previous).append(element);
    }
  });

  octavo.command("Move", "into next", "Move the current element into the next element", function(element) {
    var next;
    next = next_element(element[0]);
    if (next) {
      return $(next).prepend(element);
    }
  });

  text_nodes = function(node) {
    var inner_text_nodes, nodes;
    nodes = [];
    inner_text_nodes = function(node) {
      var child, _i, _len, _ref1, _results;
      if (node.nodeType === 3) {
        return nodes.push(node);
      } else if (node.childNodes) {
        _ref1 = node.childNodes;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          child = _ref1[_i];
          _results.push(inner_text_nodes(child));
        }
        return _results;
      }
    };
    inner_text_nodes(node);
    return nodes;
  };

  octavo.command("Text", "show nbsp", "Show non-breaking spaces", function(element) {
    return $(text_nodes(element[0])).each(function() {
      return this.textContent = this.textContent.replace("\u00A0", "\u2420");
    });
  });

  octavo.command("Text", "hide nbsp", "Hide previously shown non-breaking spaces", function(element) {
    return $(text_nodes(element[0])).each(function() {
      return this.textContent = this.textContent.replace("\u2420", "\u00A0");
    });
  });

  octavo.command("Global", "remove styles", "Remove all style attributes in the document", function() {
    return $("*[style]").each(function() {
      return $(this).removeAttr("style");
    });
  });

  octavo.command("Global", "presentational to logical", "Convert all presentational elements to local ones", function() {
    var logical, presentational, tag;
    logical = {
      "i": "em",
      "b": "strong"
    };
    presentational = ((function() {
      var _results;
      _results = [];
      for (tag in logical) {
        _results.push(tag);
      }
      return _results;
    })()).join(", ");
    return $(presentational).each(function() {
      return $();
    });
  });

  octavo.command("Global", "replace nbsps", "Replace all non-breaking spaces with spaces", function() {
    return $text_nodes(body[0]).each(function() {
      return this.textContent = this.textContent.replace("\u00A0", " ");
    });
  });

  octavo.command("Global", "clean up", "Clean up extraneous DOM rubbish", function() {
    return clean_up();
  });

  octavo.command("Global", "set title", "Set the main document title", function() {
    octavo.input(function(value) {
      document.title = value;
      return octavo.restoreCaret();
    }, document.title);
    return "selected";
  });

  octavo.command("Global", "create new document", "Create the document again from scratch", function() {
    var create_new_document;
    create_new_document = function() {
      console.log(":create_new_document");
      octavo.off();
      body.empty();
      document.title = "Title";
      body.append("<h1>Heading</h1>");
      octavo.on();
      set_title = function(value) {
        document.title = value;
        select_first_element("h1");
        return select_current_element(get_position());
      };
      octavo.input(set_title, "Document Title");
      return $("form.OctavoForm input").select();
    };
    octavo.input(function(value) {
      if (value === "yes") {
        return create_new_document();
      }
    });
    return "selected";
  });

  octavo.command("Insert", "table of contents", "Insert a table of contents at current selection", function(position) {
    var ol, previous;
    ol = $("<ol/>");
    previous = false;
    $("h2, h3, h4").each(function(index, node) {
      var header, id, li, text;
      header = $(node);
      id = header.attr("id");
      if (!id) {
        id = "o." + (index + 1);
        header.attr("id", id);
      }
      text = header.text();
      li = $("<li>").append("<a href=\"#" + id + "\">" + text + "</a>");
      if (!previous) {
        ol.append(li);
      } else if (node.tagName > previous) {
        $("li:last", ol).append($("<ul/>").append(li));
      } else if (node.tagName < previous) {
        $("ul:last", ol).parent().after(li);
      } else {
        $("li:last", ol).after(li);
      }
      return previous = node.tagName;
    });
    if (ol.find("li").size()) {
      position.range.deleteContents();
      return position.range.insertNode(ol[0]);
    }
  });

  octavo.command("Insert", "timestamp", "Insert timestamp at current selection", function(position) {
    var contents, date, readable, utcstring;
    date = new Date();
    utcstring = date.toUTCString();
    utcstring = utcstring.slice(5, 22);
    if (utcstring[0] === "0") {
      utcstring = utcstring.slice(1);
    }
    readable = document.createTextNode(utcstring);
    contents = position.range.extractContents();
    position.range.insertNode(readable);
    octavo.selectEnd(readable);
    return "selected";
  });

  octavo.command("Selection", "wrap", "Wrap current selection in an element", function(position) {
    octavo.input(function(value) {
      var contents, wrapper;
      if (!/^[A-Za-z]+[0-9]*$/.test(value)) {
        return;
      }
      contents = position.range.extractContents();
      wrapper = $("<" + value + "/>");
      position.range.insertNode(wrapper[0]);
      wrapper.append(contents);
      return octavo.selectEnd(wrapper[0]);
    });
    return "selected";
  });

  octavo.command("Selection", "magic marker", "Magically transform text into HTML!", function(position) {
    var contents, div, range, span, text;
    range = position.range;
    if (range.startContainer === range.endContainer) {
      if (range.startOffset !== range.endOffset) {
        contents = range.extractContents();
        text = $(contents).text();
        div = $("<div/>");
        div[0].innerHTML = text;
        span = $("<span/>").appendTo(div);
        range.insertNode(div[0]);
        octavo.selectEnd(div[0]);
        span.unwrap();
        return span.remove();
      }
    }
  });

  create_phrase = function(position, tag) {
    var contents, phrase;
    console.log(":create_phrase");
    contents = position.range.extractContents();
    phrase = $("<" + tag + "/>").append(contents);
    position.range.insertNode(phrase[0]);
    octavo.selectEnd(phrase[0]);
    return phrase;
  };

  exit_phrase = function(position, tag) {
    console.log(":exit_phrase");
    return octavo.selectStart(position.phrase.nextSibling);
  };

  toggle_phrase = function(position, tag) {
    console.log(":toggle_phrase");
    if (position.balanced) {
      if (__indexOf.call(position.tags, tag) >= 0) {
        if (tag === (node_name(position.phrase))) {
          return exit_phrase(position, tag);
        }
      } else {
        return create_phrase(position, tag);
      }
    }
  };

  previous_element = function(node) {
    while (node.previousSibling) {
      if (node.previousSibling.nodeType === 1) {
        return node.previousSibling;
      } else {
        node = node.previousSibling;
      }
    }
  };

  next_element = function(node) {
    while (node.nextSibling) {
      if (node.nextSibling.nodeType === 1) {
        return node.nextSibling;
      } else {
        node = node.nextSibling;
      }
    }
  };

  weirds = {
    div: true,
    pre: true
  };

  weird_to_paragraph = function(position) {
    var block, text;
    if (position.selected) {
      if ((node_name(position.element)) in weirds) {
        text = $(position.element).text();
        if (text === "") {
          block = octavo.change(position.element, "p");
          if (block && block[0]) {
            octavo.selectStart(block[0]);
          }
          return true;
        }
      }
    }
  };

  pseudo_schemes = {
    "chrome-": true,
    "webkit-": true
  };

  clean_up = function() {
    var last, screen_capture_injected;
    screen_capture_injected = body.attr("screen_capture_injected");
    if (screen_capture_injected) {
      body.removeAttr("screen_capture_injected");
    }
    $("style").each(function(index, node) {
      var style;
      style = $(node);
      if (style.text() === "") {
        return style.remove();
      }
    });
    $("script").each(function(index, node) {
      var script, src;
      script = $(node);
      if (/_gaUserPrefs/.test(script.text())) {
        script.remove();
      }
      src = script.attr("src");
      if (src && src.slice(0, 7) in pseudo_schemes) {
        return script.remove();
      }
    });
    $("link").each(function(index, node) {
      var href, link;
      link = $(node);
      href = link.attr("href");
      if (href && href.slice(0, 7) in pseudo_schemes) {
        return link.remove();
      }
    });
    $("img").each(function(index, node) {
      var img, src;
      img = $(node);
      src = img.attr("src");
      if (src && src.slice(0, 7) in pseudo_schemes) {
        return img.remove();
      }
    });
    $("span").each(function(index, node) {
      var inner, span, style;
      span = $(node);
      if (node.attributes.length === 1) {
        style = span.attr("style");
        if (style) {
          if (/line-height:[^;]+;[ \t]*$/.test(style)) {
            inner = $("<span/>").appendTo(span);
            inner.unwrap();
            return inner.remove();
          }
        }
      }
    });
    $("p, a, code, em, strong").each(function(index, node) {
      var element;
      element = $(node);
      if (!element.contents().size()) {
        return element.remove();
      }
    });
    while (true) {
      if (!body[0].childNodes.length) {
        break;
      }
      last = body[0].childNodes[body[0].childNodes.length - 1];
      if (last.nodeType === 3) {
        if (/^[ \t\r\n]+$/.test(last.textContent)) {
          $(last).remove();
        } else {
          break;
        }
      } else {
        break;
      }
    }
    return $("img").each(function(index, node) {
      var img, src;
      img = $(node);
      src = img.attr("src");
      if (src && src.slice(0, 5) === "data:") {
        return img.remove();
      }
    });
  };

  preformatted_br_return = function(position, e) {
    var LF, children, last_child, node_end;
    children = position.block.childNodes;
    last_child = position.range.endContainer === children[children.length - 1];
    node_end = position.range.endOffset === position.range.endContainer.length;
    if (last_child && node_end) {
      LF = document.createTextNode("\n\n");
    } else {
      LF = document.createTextNode("\n");
    }
    position.range.deleteContents();
    position.range.insertNode(LF);
    octavo.selectEnd(LF);
    octavo.silently(function() {
      return LF.parentNode.normalize();
    });
    e.preventDefault();
    return false;
  };

  regular_br_return = function(position, e) {
    var br, br2;
    octavo.silently(function() {
      var end_of_block;
      rangy.getSelection().move("character", 1);
      if (get_position().block !== position.block) {
        return end_of_block = true;
      } else {
        return end_of_block = false;
      }
    });
    position.range.deleteContents();
    br = $("<br/>");
    position.range.insertNode(br[0]);
    if (end_of_block) {
      br2 = $("<br/>").insertAfter(br);
      br = br2;
    }
    br = br[0];
    if (br.nextSibling) {
      octavo.selectStart(br.nextSibling);
    } else {
      octavo.selectEnd(br.parentNode);
    }
    e.preventDefault();
    return false;
  };

  paste_image = function(position, e) {
    var blob, clipboardData, item;
    clipboardData = e.originalEvent.clipboardData;
    if (!clipboardData) {
      return;
    }
    if (!clipboardData.items) {
      return;
    }
    if (!clipboardData.items.length) {
      return;
    }
    item = clipboardData.items[0];
    if (!item) {
      return;
    }
    if (item.type in image_formats) {
      blob = item.getAsFile();
      save_image(position, item.type, blob);
      return true;
    }
  };

  image_formats = {
    "image/jpeg": "jpg",
    "image/png": "png"
  };

  save_image = function(position, format, blob) {
    var extension, req;
    console.log(":save_image");
    extension = image_formats[format];
    req = new XMLHttpRequest();
    req.open("PUT", "/image/create/" + extension, true);
    req.onload = function(e) {
      var contents, img, img_src, text;
      console.log(e.target.status);
      console.log(e.target.responseText);
      if (e.target.status !== 201) {
        message(e.target.responseText, "failure");
        return;
      }
      contents = position.range.extractContents();
      text = $(contents).text();
      img = $("<img/>");
      if (text.length) {
        img.attr("alt", text);
      }
      img_src = e.target.responseText.replace(/[ \t\r\n]+$/, "");
      img.attr("src", img_src);
      position.range.insertNode(img[0]);
      return message("Saved as " + e.target.responseText, "success");
    };
    return req.send(blob);
  };

}).call(this);
